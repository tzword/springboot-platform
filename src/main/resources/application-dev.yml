#dev环境  mysql7.0
#spring:
#  datasource:
#    type: com.alibaba.druid.pool.DruidDataSource
#    driverClassName: com.mysql.jdbc.Driver
#    #druid连接池配置
#    druid:
#      #主库数据源
#      master:
#        url: jdbc:mysql://localhost:3306/springbootv2?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
#        username: root
#        password: 1323!Q@#EMSD%$^
#      #备数据源 #关闭
#      slave:
#        enabled: false
#        url: jdbc:mysql://localhost:3306/springbootv3?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
#        username: root
#        password: 1323!Q@#EMSD%$^
#        #配置初始化连接数大小
#      initial-size: 10
#      # 最大连接数
#      max-active: 50
#      #最小连接数
#      min-idle: 10
#      #获取连接等待超时时间
#      max-wait: 5000
#      pool-prepared-statements: true #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
#      max-pool-prepared-statement-per-connection-size: 20
#      validation-query: SELECT 1 FROM DUAL
#      validation-query-timeout: 20000
#      test-on-borrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
#      test-on-return: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
#      test-while-idle: true #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
#      time-between-eviction-runs-millis: 60000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#      min-evictable-idle-time-millis: 300000  #一个连接在池中最小生存的时间，单位是毫秒
#      #StatViewServlet配置。（因为暴露的监控信息比较敏感，支持密码加密和访问ip限定）
#      stat-view-servlet:
#        enabled: true
#        url-pattern: /druid/*
#        #可以增加访问账号密码【去掉注释就可以】
#        #login-username: admin
#        #login-password: 1323!Q@#EMSD%$^
#      filter:
#        stat:
#          log-slow-sql: true
#          slow-sql-millis: 1000
#          merge-sql: true
#        wall:
#          config:
#            multi-statement-allow: true


#mysql 8.0
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    #druid连接池配置
    druid:
     # 主库数据源
     master:
        url: jdbc:mysql://localhost:3306/houses?useSSL=false&serverTimezone=UTC
        username: root
        password: 1323!Q@#EMSD%$^
        #树熊数据源
     slave:
        enabled : false
        url: jdbc:mysql://localhost:3306/houses2?useSSL=false&serverTimezone=UTC
        username: root
        password: 1323!Q@#EMSD%$^
        #配置初始化连接数大小
     initial-size: 10
     # 最大连接数
     max-active: 50
     #最小连接数
     min-idle: 10
     #获取连接等待超时时间
     max-wait: 5000
     pool-prepared-statements: true #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
     max-pool-prepared-statement-per-connection-size: 20
     validation-query: SELECT 1 FROM DUAL
     validation-query-timeout: 20000
     test-on-borrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
     test-on-return: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
     test-while-idle: true #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
     time-between-eviction-runs-millis: 60000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
     min-evictable-idle-time-millis: 300000  #一个连接在池中最小生存的时间，单位是毫秒
     #StatViewServlet配置。（因为暴露的监控信息比较敏感，支持密码加密和访问ip限定）
     stat-view-servlet:
      enabled: true
      url-pattern: /druid/*
      #可以增加访问账号密码【去掉注释就可以】
      #login-username: admin
      #login-password: 1323!Q@#EMSD%$^
     filter:
      stat:
        log-slow-sql: true
        slow-sql-millis: 1000
        merge-sql: true
      wall:
        config:
          multi-statement-allow: true
  # redis配置
  redis:
    host: 127.0.0.1
    database: 0
    port: 6379
    password: 1323!Q@#EMSD%$^
    jedis:
      pool:
        max-active: 200
        max-wait: 1
        max-idle: 10
        min-idle: 0
    timeout: 1000
  # kafka配置
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
  # rabbitmq 配置
  rabbitmq:
    template:
      mandatory: true
      exchange: ex_test
      routing-key: test_001
    host: localhost
    port: 5672
    username: test01
    password: test01
    virtual-host: vh_test
    #支持发布确认与返回
    publisher-confirms: true
    publisher-returns: true
    listener:
      simple:
        #手动应答
        acknowledge-mode: manual
        #监听容器数及最大数
        concurrency: 1
        max-concurrency: 1
        #是否支持重试
        retry:
          enabled: true
# swagger 配置
swagger:
  swagger-ui-open: true
  host: localhost:8088

# 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
xxl:
  job:
    admin:
      # 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册
      addresses: http://127.0.0.1:8081/xxl-job-admin
      # 执行器通讯TOKEN [选填]：非空时启用
    accessToken:

    executor:
      # 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
      appname: demo
      # 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
      address:
      # 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
      ip:
      # 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
      port: 9999
      # 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
      logpath:
      # 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；
      logretentiondays: 30